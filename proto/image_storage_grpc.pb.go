// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/image_storage.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageStorageServiceClient is the client API for ImageStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageStorageServiceClient interface {
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*UpdateImageResponse, error)
	DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error)
	GetImagesList(ctx context.Context, in *GetImagesListRequest, opts ...grpc.CallOption) (*GetImagesListResponse, error)
}

type imageStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageStorageServiceClient(cc grpc.ClientConnInterface) ImageStorageServiceClient {
	return &imageStorageServiceClient{cc}
}

func (c *imageStorageServiceClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, "/lov3allmy.tages.ImageStorageService/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageStorageServiceClient) UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*UpdateImageResponse, error) {
	out := new(UpdateImageResponse)
	err := c.cc.Invoke(ctx, "/lov3allmy.tages.ImageStorageService/UpdateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageStorageServiceClient) DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error) {
	out := new(DownloadImageResponse)
	err := c.cc.Invoke(ctx, "/lov3allmy.tages.ImageStorageService/DownloadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageStorageServiceClient) GetImagesList(ctx context.Context, in *GetImagesListRequest, opts ...grpc.CallOption) (*GetImagesListResponse, error) {
	out := new(GetImagesListResponse)
	err := c.cc.Invoke(ctx, "/lov3allmy.tages.ImageStorageService/GetImagesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageStorageServiceServer is the server API for ImageStorageService service.
// All implementations must embed UnimplementedImageStorageServiceServer
// for forward compatibility
type ImageStorageServiceServer interface {
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	UpdateImage(context.Context, *UpdateImageRequest) (*UpdateImageResponse, error)
	DownloadImage(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error)
	GetImagesList(context.Context, *GetImagesListRequest) (*GetImagesListResponse, error)
	mustEmbedUnimplementedImageStorageServiceServer()
}

// UnimplementedImageStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageStorageServiceServer struct {
}

func (UnimplementedImageStorageServiceServer) UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedImageStorageServiceServer) UpdateImage(context.Context, *UpdateImageRequest) (*UpdateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImage not implemented")
}
func (UnimplementedImageStorageServiceServer) DownloadImage(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadImage not implemented")
}
func (UnimplementedImageStorageServiceServer) GetImagesList(context.Context, *GetImagesListRequest) (*GetImagesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImagesList not implemented")
}
func (UnimplementedImageStorageServiceServer) mustEmbedUnimplementedImageStorageServiceServer() {}

// UnsafeImageStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageStorageServiceServer will
// result in compilation errors.
type UnsafeImageStorageServiceServer interface {
	mustEmbedUnimplementedImageStorageServiceServer()
}

func RegisterImageStorageServiceServer(s grpc.ServiceRegistrar, srv ImageStorageServiceServer) {
	s.RegisterService(&ImageStorageService_ServiceDesc, srv)
}

func _ImageStorageService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageStorageServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lov3allmy.tages.ImageStorageService/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageStorageServiceServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageStorageService_UpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageStorageServiceServer).UpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lov3allmy.tages.ImageStorageService/UpdateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageStorageServiceServer).UpdateImage(ctx, req.(*UpdateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageStorageService_DownloadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageStorageServiceServer).DownloadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lov3allmy.tages.ImageStorageService/DownloadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageStorageServiceServer).DownloadImage(ctx, req.(*DownloadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageStorageService_GetImagesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImagesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageStorageServiceServer).GetImagesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lov3allmy.tages.ImageStorageService/GetImagesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageStorageServiceServer).GetImagesList(ctx, req.(*GetImagesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageStorageService_ServiceDesc is the grpc.ServiceDesc for ImageStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lov3allmy.tages.ImageStorageService",
	HandlerType: (*ImageStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadImage",
			Handler:    _ImageStorageService_UploadImage_Handler,
		},
		{
			MethodName: "UpdateImage",
			Handler:    _ImageStorageService_UpdateImage_Handler,
		},
		{
			MethodName: "DownloadImage",
			Handler:    _ImageStorageService_DownloadImage_Handler,
		},
		{
			MethodName: "GetImagesList",
			Handler:    _ImageStorageService_GetImagesList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/image_storage.proto",
}
